{
  "id": "4090a7cad3ce156d",
  "slug": "chicago-taxi-trips-deck-gl-map",
  "trashed": false,
  "description": "",
  "likes": 0,
  "publish_level": "public",
  "forks": 0,
  "fork_of": {
    "id": "db00010d81235f7b",
    "slug": "chicago-taxi-trips",
    "title": "Chicago Taxi Trips",
    "owner": {
      "id": "17b72db66175b428",
      "github_login": "RandomFractals",
      "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
      "login": "randomfractals",
      "name": "Taras Novak",
      "bio": "I map 🌐 & graph  📈 data 🈸 ",
      "home_url": "https://www.linkedin.com/in/tarasnovak",
      "type": "individual"
    },
    "version": 203
  },
  "update_time": "2021-06-27T03:04:28.263Z",
  "publish_time": "2021-06-26T02:02:38.867Z",
  "publish_version": 384,
  "thumbnail": "084039f552dcc7a3bd6a5507823690577ecbff1eed748ca63f44102482c17d45",
  "default_thumbnail": "084039f552dcc7a3bd6a5507823690577ecbff1eed748ca63f44102482c17d45",
  "roles": [],
  "sharing": null,
  "owner": {
    "id": "17b72db66175b428",
    "github_login": "RandomFractals",
    "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
    "login": "randomfractals",
    "name": "Taras Novak",
    "bio": "I map 🌐 & graph  📈 data 🈸 ",
    "home_url": "https://www.linkedin.com/in/tarasnovak",
    "type": "individual"
  },
  "creator": {
    "id": "17b72db66175b428",
    "github_login": "RandomFractals",
    "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
    "login": "randomfractals",
    "name": "Taras Novak",
    "bio": "I map 🌐 & graph  📈 data 🈸 ",
    "home_url": "https://www.linkedin.com/in/tarasnovak"
  },
  "collections": [
    {
      "id": "55a954f45c0be7c8",
      "type": "public",
      "slug": "deckgl",
      "title": "DeckGL",
      "description": "DeckGL maps",
      "update_time": "2021-06-16T20:19:49.324Z",
      "pinned": false,
      "ordered": true,
      "custom_thumbnail": null,
      "thumbnail": "38c7f53b846da4e440f0c8bb1266c6f744884a3b6f4c56601d8bc7ee040492a7",
      "listing_count": 5,
      "parent_collection_count": 0,
      "owner": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map 🌐 & graph  📈 data 🈸 ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "type": "individual"
      }
    },
    {
      "id": "c30622739accf157",
      "type": "public",
      "slug": "arquero",
      "title": "Arquero",
      "description": "Notebooks using Arquero JS library for manipulating data.",
      "update_time": "2021-06-08T11:51:29.570Z",
      "pinned": false,
      "ordered": false,
      "custom_thumbnail": null,
      "thumbnail": "084039f552dcc7a3bd6a5507823690577ecbff1eed748ca63f44102482c17d45",
      "listing_count": 10,
      "parent_collection_count": 0,
      "owner": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map 🌐 & graph  📈 data 🈸 ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "type": "individual"
      }
    },
    {
      "id": "cf858224d6488195",
      "type": "public",
      "slug": "transportation",
      "title": "Transportation",
      "description": "Public transportation notebooks",
      "update_time": "2021-06-04T03:34:03.975Z",
      "pinned": false,
      "ordered": false,
      "custom_thumbnail": null,
      "thumbnail": "084039f552dcc7a3bd6a5507823690577ecbff1eed748ca63f44102482c17d45",
      "listing_count": 16,
      "parent_collection_count": 0,
      "owner": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map 🌐 & graph  📈 data 🈸 ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "type": "individual"
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "version": 384,
  "title": "Chicago Taxi Trips Deck.gl Map",
  "license": null,
  "copyright": "",
  "nodes": [
    {
      "id": 0,
      "value": "md`# Chicago Taxi Trips Deck.gl Map\n\nData Source: [Chicago Transportation](https://data.cityofchicago.org/browse?category=Transportation) / [Taxi Trips](https://data.cityofchicago.org/Transportation/Taxi-Trips/wrvz-psew)\n\nTrips Map Info: https://deck.gl/examples/trips-layer/\n`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 120,
      "value": "md`## ${geoDataTable.totalRows().toLocaleString()} geo located trips | ${geoTrips.totalRows().toLocaleString()} routes | ${tripLocations.totalRows().toLocaleString()} locations`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 263,
      "value": "viewof tripDate = date({\n  title: year, \n  min: `2013-01-01`,\n  max: `${year}-12-31`,\n  value: `2021-05-31`,\n  description: `Select Trips Date`\n})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 244,
      "value": "mapContainer = html `<div style=\"height:${width*.9 - 50}px\">\n  <div class=\"data-panel\">\n    <b>${geoDataTable.size.toLocaleString()}</b> Traffic Segments\n  </div>\n  <div id=\"tooltip\"></div>\n</div>`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 270,
      "value": "md`TODO: add trips layer`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 345,
      "value": "tripLocationsGridLayer = {\n  const tripLocationsGridLayer = new deck.ScreenGridLayer({\n    id: 'tripsGridLayer',\n    data: tripLocations.objects(),\n    opacity: 0.8,\n    pickable: true,\n    cellSizePixels: 50,\n    colorRange: [\n      [0, 25, 0, 25],\n      [0, 85, 0, 85],\n      [0, 127, 0, 127],\n      [0, 170, 0, 170],\n      [0, 190, 0, 190],\n      [0, 255, 0, 255]\n    ],\n    getPosition: d => [Number(d.longitude), Number(d.latitude)],\n    getWeight: d => d.count,\n    onHover: onHover\n  });\n  deckgl.setProps({layers: [tripLocationsGridLayer]});\n  return tripLocationsGridLayer;\n}",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 324,
      "value": "tripPathsLayer = {\n  const tripPathsLayer = new deck.PathLayer({\n    id: 'tripPathsLayer',\n    data: tripPaths.objects(),\n    opacity: 0.2,\n    pickable: true,\n    widthScale: 20,\n    widthMinPixels: 2,\n    getColor: d => d.color,\n    getPath: d => d.path\n  });\n  // deckgl.setProps({layers: [tripPathsLayer]});\n  return tripPathsLayer;\n}",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 124,
      "value": "md`## Trip Data (${data.length.toLocaleString()} trips)`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 30,
      "value": "viewof tableView = Inputs.table(data, {\n  columns: columns,\n  reverse: false\n})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 32,
      "value": "md`## Trip Data Queries and Filters`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 14,
      "value": "year = new Date().getFullYear()",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 35,
      "value": "columns = [\n  'trip_start_timestamp',\n  'trip_end_timestamp',\n  'trip_seconds',\n  'trip_miles',\n  'pickup_community_area',\n  'dropoff_community_area',\n  'fare',\n  'tips',\n  'tolls',\n  'extras',\n  'trip_total',\n  'payment_type',\n  'company',\n  'pickup_centroid_latitude',\n  'pickup_centroid_longitude',\n  'dropoff_centroid_latitude',\n  'dropoff_centroid_longitude',\n  'trip_id',\n  'taxi_id'\n]",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 17,
      "value": "dataUrl = 'https://data.cityofchicago.org/resource/wrvz-psew.json'",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 19,
      "value": "query = `?$limit=15000&$where=trip_start_timestamp between '${tripDate}T00:00:00' and '${tripDate}T23:59:59'`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 28,
      "value": "data = await fetch(dataUrl + query).then(data => data.json())",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 117,
      "value": "geoDataTable = aq.from(\n    data.filter(d => d.trip_miles >= 0 &&\n      d['pickup_centroid_latitude'] &&\n      d['pickup_centroid_longitude'] &&\n      d['dropoff_centroid_latitude'] &&\n      d['dropoff_centroid_longitude'])\n  )\n  .derive({\n    trip_start_time: d => op.parse_date(d.trip_start_timestamp),\n    trip_end_time: d => op.parse_date(d.trip_end_timestamp)\n  })\n  .orderby('trip_start_time')",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 275,
      "value": "tripStartLocations = geoDataTable.select('pickup_centroid_latitude', 'pickup_centroid_longitude')\n  .rename({\n    pickup_centroid_latitude: 'latitude', \n    pickup_centroid_longitude: 'longitude'\n  })\n  .groupby('latitude', 'longitude')\n  .count()",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 280,
      "value": "tripEndLocations = geoDataTable.select('dropoff_centroid_latitude', 'dropoff_centroid_longitude')\n  .rename({\n    dropoff_centroid_latitude: 'latitude', \n    dropoff_centroid_longitude: 'longitude'\n  })\n  .groupby('latitude', 'longitude')\n  .count()",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 341,
      "value": "tripLocations = tripStartLocations.concat(tripEndLocations)",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 289,
      "value": "geoLocations = tripStartLocations.union(tripEndLocations)",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 295,
      "value": "tripRoutes = geoDataTable.select(\n    'pickup_centroid_latitude', \n    'pickup_centroid_longitude',\n    'dropoff_centroid_latitude', \n    'dropoff_centroid_longitude'\n  )\n  .rename({\n    pickup_centroid_latitude: 'start_latitude',\n    pickup_centroid_longitude: 'start_longitude',\n    dropoff_centroid_latitude: 'end_latitude',\n    dropoff_centroid_longitude: 'end_longitude',    \n  })",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 298,
      "value": "startEndGeoTrips = tripRoutes.union(tripRoutes)",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 304,
      "value": "reversedGeoTrips = startEndGeoTrips\n  .rename({\n    end_latitude: 'start_latitude',\n    end_longitude: 'start_longitude',\n    start_latitude: 'end_latitude',\n    start_longitude: 'end_longitude',    \n  })",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 311,
      "value": "geoTrips = startEndGeoTrips.join(reversedGeoTrips)",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 318,
      "value": "tripWaypoints = geoTrips.derive({\n  turn_latitude: d => d.start_latitude,\n  turn_longitude: d => d.end_longitude\n})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 322,
      "value": "tripPaths = tripWaypoints.derive({\n  path: d=> [[op.parse_float(d.start_longitude), op.parse_float(d.start_latitude)], \n             [op.parse_float(d.turn_longitude), op.parse_float(d.turn_latitude)], \n             [op.parse_float(d.end_longitude), op.parse_float(d.end_latitude)]],\n  color: [0, 124, 0]\n})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 80,
      "value": "tripsByCompany = geoDataTable.groupby('company').count().orderby(aq.desc('count'))",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 148,
      "value": "tripsByStartTime = geoDataTable.groupby('trip_start_time').count()",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 235,
      "value": "md`## Map Elements and Styles`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 238,
      "value": "deckgl = {\n  return new deck.DeckGL({\n    container: mapContainer,\n    map: mapboxgl,\n    mapboxAccessToken: '',\n    mapboxApiAccessToken: 'pk.eyJ1IjoiZGF0YXBpeHkiLCJhIjoiY2tnM3ZhZWJjMDE1ajJxbGY1eTNlemduciJ9.YZ9CJEza0hvAQmTRBhubmQ',\n    mapStyle: 'https://api.maptiler.com/maps/toner/style.json?key=bMizIsuAeRiZikCLHO9q',\n    initialViewState: {\n      latitude: 41.88,\n      longitude: -87.65,\n      zoom: 10,\n      minZoom: 8,\n      maxZoom: 15,\n      pitch: 0,\n      bearing: 0\n    },\n    controller: true\n  });\n}",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 356,
      "value": "tooltip = mapContainer.querySelector('#tooltip')",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 362,
      "value": "function onHover (info) {\n  const data = info.object;\n  if (data) {\n    tooltip.style.left = `${info.x}px`;\n    tooltip.style.top = `${info.y}px`;\n    tooltip.innerHTML = `<b>${data.cellWeight.toLocaleString()} trips to/from this location</b>`;\n  } else { \n    tooltip.innerHTML = '';\n  }\n}",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 359,
      "value": "tooltipStyle = html `\n<style>\n#tooltip:empty {\n  display: none;\n}\n#tooltip {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n  position: absolute;\n  padding: 4px;\n  margin: 8px;\n  border-radius: 3px;\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n  max-width: 300px;\n  z-index: 9;\n  pointer-events: none;\n}\n</style>\n`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 240,
      "value": "html`<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.3.0/mapbox-gl.css' rel='stylesheet' />\nmapbox-gl.css`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 9,
      "value": "md`## Imports`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 49,
      "value": "import {date} from '@jashkenas/inputs'",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 12,
      "value": "import { aq, op } from '@uwdata/arquero'",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 229,
      "value": "mapboxgl = require('mapbox-gl@^2.3.0/dist/mapbox-gl.js')",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 232,
      "value": "deck = require.alias({\n  // optional dependencies\n  h3: {},\n  s2Geometry: {}\n})('deck.gl@^8.4.17/dist.min.js')",
      "pinned": false,
      "mode": "js"
    }
  ]
}