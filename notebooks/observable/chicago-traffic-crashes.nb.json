{
  "id": "59ba6f4a102f4f95",
  "slug": "chicago-traffic-crashes",
  "trashed": false,
  "description": "",
  "likes": 0,
  "publish_level": "public",
  "forks": 3,
  "fork_of": null,
  "update_time": "2021-06-14T15:02:53.906Z",
  "publish_time": "2021-06-08T14:39:15.013Z",
  "publish_version": 117,
  "thumbnail": "c4b8b916d9532e5c188931c0837594651729b87815ef802fb8601f3bc70553e0",
  "default_thumbnail": "c4b8b916d9532e5c188931c0837594651729b87815ef802fb8601f3bc70553e0",
  "roles": [],
  "sharing": null,
  "owner": {
    "id": "17b72db66175b428",
    "github_login": "RandomFractals",
    "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
    "login": "randomfractals",
    "name": "Taras Novak",
    "bio": "I map 🌐 & graph  📈 data 🈸 ",
    "home_url": "https://www.linkedin.com/in/tarasnovak",
    "type": "individual"
  },
  "creator": {
    "id": "17b72db66175b428",
    "github_login": "RandomFractals",
    "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
    "login": "randomfractals",
    "name": "Taras Novak",
    "bio": "I map 🌐 & graph  📈 data 🈸 ",
    "home_url": "https://www.linkedin.com/in/tarasnovak"
  },
  "collections": [
    {
      "id": "cf858224d6488195",
      "type": "public",
      "slug": "transportation",
      "title": "Transportation",
      "description": "Public transportation notebooks",
      "update_time": "2021-06-04T03:34:03.975Z",
      "pinned": false,
      "ordered": false,
      "custom_thumbnail": null,
      "thumbnail": "f195a105405d38650d0fe79da26bb5a91994a4a231481a4ab062d223c36de082",
      "listing_count": 12,
      "parent_collection_count": 0,
      "owner": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars1.githubusercontent.com/u/656833?v=4",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map 🌐 & graph  📈 data 🈸 ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "type": "individual"
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "version": 117,
  "title": "Chicago Traffic Crashes",
  "license": null,
  "copyright": "",
  "nodes": [
    {
      "id": 0,
      "value": "md`# Chicago Traffic Crashes\n\nData Source: [Chicago Transportation](https://data.cityofchicago.org/browse?category=Transportation) / [Traffic Crashes](https://data.cityofchicago.org/Transportation/Traffic-Crashes-Crashes/85ca-t3if)\n`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 55,
      "value": "map = {\n  // create map container\n  let mapContainer = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });\n  yield mapContainer;\n  \n  // create leaflet map with attributions\n  let map = L.map(mapContainer).setView([41.85, -87.68], 10); // Chicago origins\n  let osmLayer = L.tileLayer( // 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}@2x.png')\n    'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\\\"http://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors, &copy; <a href=\\\"http://cartodb.com/attributions\\\">CartoDB</a>',\n    detectRetina: false,\n    maxZoom: 18,\n    minZoom: 10,\n    noWrap: false,\n    subdomains: 'abc'\n  }).addTo(map);\n\n  // create hit points for the heatmap layer\n  let hitPoints = geoData.features.map(feature => \n    feature.geometry.coordinates.slice().reverse().concat([0.1])); // intensity\n  \n  // add heat layer\n  let heatmapLayer = heatLayer(hitPoints, {\n    minOpacity: 0.12,\n    maxZoom: 18,\n    max: 1.0,\n    radius: 8,\n    blur: 5,\n    gradient: null\n  }).addTo(map);\n  \n  // red dot marker\n  const marker = {\n    radius: 6,\n    fillColor: \"#ff4e3b\",\n    color: \"#ff0000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n  };\n  \n  // map markers\n  const pointToLayer = function (feature, latlng) {\n    return L.circleMarker(latlng, marker);\n  }\n  \n  // add markers\n  let markers = markerCluster({});\n  let geoLayer = L.geoJson(geoData, {\n    pointToLayer: pointToLayer,    \n    onEachFeature: function (feature, layer) {\n      const data = feature.properties;\n      layer.bindTooltip(`${data.street_no} ${data.street_direction} ${data.street_name} <br />\n        at ${data.crash_date} <br /> ${data.crash_type}`, {sticky: true});\n    }\n  });  \n  \n  markers.addLayer(geoLayer);\n  map.addLayer(markers);\n  \n  // map.fitBounds(markers.getBounds());\n}",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 24,
      "value": "viewof year = Inputs.select(years, {value: 2021, label: 'Select Year:', format: year => year})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 98,
      "value": "dayPlot = Plot.plot({\n  height: 180,\n  x: {\n    axis: null,\n    padding: 0,\n  },\n  y: {\n    padding: 0,\n    tickFormat: Plot.formatWeekday('en', 'narrow'),\n    tickSize: 0\n  },\n  fy: {\n    reverse: true\n  },\n  facet: {\n    data: crashesByDate,\n    y: d => d.date.getUTCFullYear()\n  },\n  marks: [\n    Plot.cell(crashesByDate, {\n      x: d => d3.utcWeek.count(d3.utcYear(d.date), d.date),\n      y: d => d.date.getUTCDay(),\n      fill: 'count',\n      title: d => `${d.date.toLocaleDateString()}: ${d.count.toLocaleString()} crashes`,\n      inset: 0.5\n    })\n  ]\n})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 7,
      "value": "md`## Data`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 38,
      "value": "viewof tableView = Inputs.table(data, {\n  columns: columns,\n  reverse: true\n})",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 10,
      "value": "md`## Data Queries and Filters`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 26,
      "value": "years = [2020, 2021]",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 40,
      "value": "columns = [\n  'crash_date',\n  'crash_type',\n  'posted_speed_limit',\n  'weather_condition',\n  'lighting_condition',\n  'first_crash_type',\n  'trafficway_type',\n  'alignment',\n  'roadway_sourface_cond',\n  'road_defect',\n  'report_type',\n  'private_property',\n  'hit_and_run_i',\n  'damage',\n  'date_police_notified',\n  'prim_contributory_cause',\n  'sec_contributory_cause',\n  'street_no',\n  'street_direction',\n  'street_name',\n  'beat_of_occurrence',\n  'photos_taken_i',\n  'num_units',\n  'most_severe_injury',\n  'injuries_total',\n  'injuries_fatal',\n  'injuries_incapacitating',\n  'injuries_reported_not_evident',\n  'injuries_no_indication',\n  'injuries_unknown',\n  'crash_hour',\n  'crash_day_of_week',\n  'crash_month',\n  'latitude',\n  'longitude'\n]",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 19,
      "value": "dataUrl = 'https://data.cityofchicago.org/resource/85ca-t3if.json'",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 22,
      "value": "query = `?$limit=100000&$where=crash_date between '${year}-01-01T00:00:00' and '${year}-12-31T23:59:59'`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 31,
      "value": "data = await fetch(dataUrl + query).then(data => data.json())",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 66,
      "value": "geoData = getGeoDataPoints(data)",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 93,
      "value": "dataTable = aq.from(data)\n  .derive({\n    date_time: d => op.parse_date(d.crash_date)\n  })\n  .spread({crash_date: d => op.split(d.crash_date, 'T')}, {as: ['date', 'time']})\n  .orderby('posted_speed_limit')",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 96,
      "value": "crashesByDate = dataTable.groupby('date').count()\n  .derive({\n    date: d => op.parse_date(d.date)\n  })",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 12,
      "value": "md`## Imports`",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 15,
      "value": "import { aq, op } from '@uwdata/arquero'",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 62,
      "value": "import { getGeoDataPoints } from '@randomfractals/geo-data-utils'",
      "pinned": false,
      "mode": "js"
    },
    {
      "id": 56,
      "value": "leafletStyles = html`<link href='${resolve('leaflet@1.7.1/dist/leaflet.css')}' rel='stylesheet' />`",
      "pinned": true,
      "mode": "js"
    },
    {
      "id": 59,
      "value": "L = require('leaflet@1.7.1')",
      "pinned": true,
      "mode": "js"
    },
    {
      "id": 74,
      "value": "heatLayer = L, require('leaflet.heat').catch(() =>  L.heatLayer)",
      "pinned": true,
      "mode": "js"
    },
    {
      "id": 68,
      "value": "markerClusterStyles = html`<link href='${resolve('leaflet.markercluster@1.2.0/dist/MarkerCluster.Default.css')}' rel='stylesheet' />`",
      "pinned": true,
      "mode": "js"
    },
    {
      "id": 70,
      "value": "markerCluster = L, require('leaflet.markercluster@1.2.0').catch(() => L.markerClusterGroup)",
      "pinned": true,
      "mode": "js"
    }
  ]
}